version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-credit_card_optimizer}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-credit_card_optimizer}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    environment:
      # Application
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3001}
      API_VERSION: ${API_VERSION:-v1}
      
      # Database
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-credit_card_optimizer}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-credit_card_optimizer}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      
      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Authentication
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      # SMS Processing
      SMS_PROCESSING_ENABLED: ${SMS_PROCESSING_ENABLED:-true}
      SMS_BATCH_SIZE: ${SMS_BATCH_SIZE:-100}
      SMS_PROCESSING_INTERVAL: ${SMS_PROCESSING_INTERVAL:-5000}
      
      # Payment Gateway Integration
      PAYMENT_GATEWAY_API_KEY: ${PAYMENT_GATEWAY_API_KEY}
      PAYMENT_GATEWAY_SECRET: ${PAYMENT_GATEWAY_SECRET}
      PAYMENT_GATEWAY_WEBHOOK_SECRET: ${PAYMENT_GATEWAY_WEBHOOK_SECRET}
      
      # ML Services
      ML_SERVICE_URL: http://ml-services:8000
      ML_SERVICE_API_KEY: ${ML_SERVICE_API_KEY}
      
      # Email Service
      EMAIL_SERVICE: ${EMAIL_SERVICE:-sendgrid}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@creditcardoptimizer.com}
      
      # SMS Service
      SMS_SERVICE: ${SMS_SERVICE:-twilio}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      
      # File Upload
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      UPLOAD_PATH: ${UPLOAD_PATH:-./uploads}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: ${LOG_FILE:-./logs/app.log}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      
      # Development
      DEBUG: ${DEBUG:-true}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-true}
      ENABLE_GRAPHIQL: ${ENABLE_GRAPHIQL:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard
  web-dashboard:
    build:
      context: ./web-dashboard
      dockerfile: Dockerfile
    ports:
      - "${WEB_DASHBOARD_PORT:-3000}:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://backend:${PORT:-3001}
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./web-dashboard:/app
      - /app/node_modules
    networks:
      - app-network

  # ML Services
  ml-services:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
    ports:
      - "${ML_SERVICE_PORT:-8000}:8000"
    environment:
      MODEL_PATH: ${ML_MODEL_PATH:-/app/models}
      ML_SERVICE_API_KEY: ${ML_SERVICE_API_KEY}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./ml-services:/app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web-dashboard
    networks:
      - app-network
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge 